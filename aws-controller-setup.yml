---
- name: Setup Controller infrastructure 
  hosts: localhost
  connection: local 
  gather_facts: no
  vars:
    server_env: "test" 
    server_os: "linux"
    business_domain_name: "Red Hat"
    aws_instance_type: m4.xlarge

  tasks:

  - name: Setup AWS
    include_role:
      name: aws-infra-setup 
      
  - name: Get AWS infra info 
    include_role:
      name: aws-infra-info
    
  - name: call role to create all RHEL 8 servers for AAP
    include_role:
      name: aws-aap-infra 

  - meta: refresh_inventory

  - name: Prepare certificates directory 
    file: 
      name: "{{ playbook_dir }}/generated_files"
      state: directory 

  # - name: print hostvars
  #   debug:
  #     msg: 
  #       - "Controller Public DNS: {{ hostvars[groups['demo_controller'][0]]['public_dns_name'] }}"
  #       - "Controller Private DNS: {{ hostvars[groups['demo_controller'][0]]['private_dns_name'] }}"
  #       - "Execution Node 1 Private DNS: {{ hostvars[groups['demo_execution'][0]]['private_dns_name'] }}"
  #       - "Services Catalog Public DNS: {{ hostvars[groups['demo_catalog'][0]]['public_dns_name'] }}"
  #       - "SSO Public DNS: {{ hostvars[groups['demo_catalog'][0]]['public_dns_name'] }}"

- name: Register to RHSM 
  hosts: aws_ec2
  gather_facts: no
  become: yes 
  collections:
    - community.general 

  tasks:
    - name: Subscribe to Ansible by Pool ID 
      redhat_subscription:
        state: present
        username: "{{ redhat_username }}"
        password: "{{ redhat_password }}"

    - name: Make sure repositories are allowed to be managed from subscription-manager 
      shell: subscription-manager config --rhsm.manage_repos=1 

    - name: Enable jb-eap repo 
      rhsm_repository:
        name: jb-eap-7.3-for-rhel-8-x86_64-rpms
        state: enabled 

- name: Generate TLS certificates for Controller, SSO, and Catalog 
  hosts: localhost 
  connection: local 
  tasks: 
    - name: Prepare certificate challenges for Controller, SSO, and Catalog 
      include_role:
        name: certificates
        tasks_from: prepare-challenge.yml 

    - name: Prepare route53 DNS for challenge
      include_role:
        name: certificates
        tasks_from: set-dns-challenge.yml

    - name: Validate DNS challenges 
      include_role: 
        name: certificates
        tasks_from: validate-challenge.yml

    - name: Create SSO Java Keystore 
      java_keystore:
        name: sso
        certificate: "{{ lookup('file', '{{ playbook_dir }}/generated_files/{{ sso_dns }}_chain') }}"
        private_key: "{{ lookup('file', '{{ playbook_dir }}/generated_files/cert_key') }}"
        password: "{{ admin_password }}"
        dest: "{{ playbook_dir }}/generated_files/sso.jks"

    - name: Setup AWS Route 53 for TLS 
      include_role:
        name: certificates 
        tasks_from: set-dns.yml 

# - name: Deploy TLS certificates for Controller 
#   hosts: demo_controller 
#   gather_facts: no 
#   become: yes 

#   tasks:
#     - name: Copy Controller Cert 
#       copy:
#         src: "{{ playbook_dir }}/generated_files/{{ controller_dns }}_chain"
#         dest: "{{ controller_cert_dest }}"

#     - name: Copy Controller Key 
#       copy:
#         src: "{{ playbook_dir }}/generated_files/cert_key"
#         dest: "{{ controller_key_dest }}"

- name: Install Automation Controller 
  hosts: localhost 
  connection: local 
  gather_facts: no

  tasks:
    - name: Create directory for aap installer
      file:
        path: "{{ playbook_dir }}/aap"
        state: directory

    - name: Extract AAP tar.gz install
      unarchive:
        src: "aap.tar.gz"
        dest: "{{ playbook_dir }}/aap"
        extra_opts: ['--strip-components=1', '--show-stored-names']
    ## This is a real PITA if on a mac.  You need to install gnu-tar, 
    ## I did `brew install gnu-tar`

    - name: template inventory file for Ansible Controller Install
      template:
        src: "controller_install.j2"
        dest: "{{ playbook_dir }}/aap/inventory"

    - name: run the Automation Controller installer
      shell: "ANSIBLE_BECOME_METHOD='sudo' ANSIBLE_BECOME=True ./setup.sh -e gpgcheck=0"
      args:
        chdir: "{{ playbook_dir }}/aap"
      async: 2800
      poll: 30

    - name: wait for Automation Controller to be up
      uri:
        url: https://{{ hostvars[groups['demo_controller'][0]]['public_dns_name'] }}/api/v2/ping/
        method: GET
        user: admin
        password: "{{ admin_password }}"
        validate_certs: false
      register: check2
      until: check2.json is defined and check2.json.instances[0].capacity > 0 and check2.json.instance_groups[0].capacity > 0
      retries: 60
      delay: 10

    - name: Load manifest into variable
      local_action:
        module: slurp
        src: "{{ playbook_dir }}/manifest.zip"
      register: manifest_file

    - name: Post manifest file
      uri:
        url: https://{{ hostvars[groups['demo_controller'][0]]['public_dns_name'] }}/api/v2/config/
        method: POST
        user: admin
        password: "{{ admin_password }}"
        body: '{ "eula_accepted": true, "manifest": "{{ manifest_file.content }}" }'
        body_format: json
        validate_certs: false
        force_basic_auth: true
        
- name: Configure Automation Controller  
  hosts: localhost 
  connection: local 
  gather_facts: no 

  tasks:

    - name: Add credentials
      include_role:
        name: controller-credentials

    - name: Add Inventories 
      include_role:
        name: controller-inventory 

    - name: Add Projects 
      include_role:
        name: controller-projects 

    - name: Add Workflows 
      include_role:
        name: controller-workflows

    - debug:
        msg: 
          - "Access Automation Controller here: https://{{ controller_dns }}"
          - "Access SSO here: https://{{ sso_dns }}"
          - "Access Services Catalog here: https://{{ catalog_dns }}"
          
